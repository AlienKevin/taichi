name: Test manylinux
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [proton/test/manylinux]

env:
  PROD_PWD: ${{ secrets.PYPI_PWD_PROD }}
  NIGHT_PWD: ${{ secrets.TAICHI_PYPI_PWD }}
  NIGHT_USERNAME: ${{ secrets.TAICHI_PYPI_USERNAME }}
  METADATA_USERNAME: ${{ secrets.METADATA_USERNAME }}
  METADATA_PASSWORD: ${{ secrets.METADATA_PASSWORD }}
  METADATA_URL: ${{ secrets.METADATA_URL }}
  RELEASE_VERSION: ${{ github.event.inputs.version }}
  TI_CI: 1

jobs:
  build_and_test_manylinux2014:
    name: Build and Upload (manylinux2014)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix:
      - {"name":"taichi-nightly","python":"3.7","conda_python":"py37"}
    runs-on: [self-hosted, cuda, cn, release]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - name: Prepare Environment
        run: |
          . .github/workflows/scripts/common-utils.sh
          prepare-build-cache
          echo CI_DOCKER_RUN_EXTRA_ARGS="-v $(pwd):/home/dev/taichi" >> $GITHUB_ENV

      - name: Build
        run: |
          . .github/workflows/scripts/common-utils.sh

          ci-docker-run-gpu --name taichi-test \
             registry.taichigraphics.com/taichidev-manylinux2014-cuda:v0.0.0 \
             /home/dev/taichi/.github/workflows/scripts/unix-build.sh

        env:
          PY: ${{ matrix.conda_python }}
          PROJECT_NAME: ${{ matrix.name }}
          TAICHI_CMAKE_ARGS: >-
            -DTI_WITH_OPENGL:BOOL=ON
            -DTI_WITH_CC:BOOL=OFF
            -DTI_WITH_VULKAN:BOOL=ON
            -DTI_BUILD_TESTS:BOOL=ON

      # - name: Test
      #   run: |
      #     . .github/workflows/scripts/common-utils.sh

      #     ci-docker-run-gpu --name taichi-test \
      #        registry.taichigraphics.com/taichidev-ubuntu18.04:v0.3.4 \
      #        /home/dev/taichi/.github/workflows/scripts/unix_test.sh
      #   env:
      #     PY: ${{ matrix.conda_python }}
      #     TI_WANTED_ARCHS: "cuda,cpu"
